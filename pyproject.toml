[tool.poetry]
name = "velum"
version = "0.5.0"
description = "An opinionated wrapper for the Eludris API."
authors = ["Chromosomologist <chromosomologist@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.8.3"
typing-extensions = "^4.4.0"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.17.1"
pyright = "^1.1.313"
isort = "^5.10.1"
black = "^23.3.0"
slotscheck = "^0.16.1"
ruff = "^0.1.2"
pre-commit = "^2.20.0"

[tool.poetry.group.speedups.dependencies]
aiohttp = { extras = ["speedups"], version = "^3.8.3" }
ciso8601 = "^2.2.0"
uvloop = { version = "^0.17.0", platform = "linux" }
orjson = "^3.8.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
include = ["velum", "examples"]
exclude = ["**/__init__.py"]
pythonVersion = "3.10"
typeCheckingMode = "strict"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
exclude-classes = """
(
    ^velum\\.internal\\.typing_patches:WSMessage$
    |^velum\\.internal\\.data_binding:(_JSONLoader|_JSONDumper)$
)
"""

[tool.ruff]
target-version = "py310"
line-length = 100

exclude = [
    "examples",
]

select = ["ALL"]
ignore = [
    # `self` and `cls` do not need annotations.
    "ANN101",
    "ANN102",
    # Magic methods do not need documentation.
    "D105",
    # Class docstrings are at the class level.
    "D107",
    # Docstrings start on first line after class definition (incompatibility between D203 and D211).
    "D203",
    # Docstrings start on the first line (`"""text\n..."""`; incompatibility between D212 and D213).
    "D213",
    # Pyright error codes are obnoxiously long.
    "PGH003",
    # Autodoc types sadly shadow builtins, we just gotta cope.
    "A003",
    # Module docstrings starting with "This" are fine.
    "D404",
    # I don't think *enforcing* these rules provides any benefit.
    "TD",
    "FIX",
    # We use assert as a sort-of inline `typing.cast`.
    "S101",
    # Low argument counts are hard to deal with for api wrappers.
    "PLR0913",
    # We do not need cryptographically secure randomisation on our heartbeat :).
    "S311",
    # TODO: Finish documentation and remove these rules.
    "D",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"__init__.py" = [
    # Wildcard imports are fine in __init__; duplicating exports is a pain to maintain.
    "F403",
    "F405",
    # Allow re-exporting modules.
    "PLC0414",
]
"__main__.py" = [
    # Allow printing in scripts.
    "T201",
]

[tool.ruff.isort]
force-single-line = true
